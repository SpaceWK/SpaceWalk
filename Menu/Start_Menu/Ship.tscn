[gd_scene load_steps=13 format=2]

[ext_resource path="res://Ships/Luminaris/Luminaris0.glb" type="PackedScene" id=1]
[ext_resource path="res://Ships/EngineFlame/engine_flame.material" type="Material" id=2]
[ext_resource path="res://Ships/SpeedDashes/speed_particle.png" type="Texture" id=3]
[ext_resource path="res://Ships/SpeedDashes/SpeedDashes.tscn" type="PackedScene" id=4]
[ext_resource path="res://Menu/Start_Menu/Ship.gd" type="Script" id=5]

[sub_resource type="BoxShape" id=1]
extents = Vector3( 1, 1, 1.9719 )

[sub_resource type="CylinderMesh" id=2]
material = ExtResource( 2 )
top_radius = 3.074
height = 2.575

[sub_resource type="Shader" id=3]
code = "shader_type particles;

uniform float tunnel_radius : hint_range( 0.0, 10.0 ) = 2.0;
uniform float tunnel_length : hint_range( 0.0, 100.0 ) = 50.0;

float rand_from_seed(in uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
	s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {

	if (RESTART) {
		uint alt_seed1 = hash(NUMBER + uint(1) + RANDOM_SEED);
		// set particle position in model space with tunnel_radius and tunnel_length
		float angle_rand = rand_from_seed( alt_seed1 ) * 6.283185;
		TRANSFORM[3].x = tunnel_length;
		TRANSFORM[3].y = sin( angle_rand ) * tunnel_radius;
		TRANSFORM[3].z = cos( angle_rand ) * tunnel_radius;
		// calculate VELOCITY in negative x direction
		VELOCITY.x = -tunnel_length / LIFETIME;
		// calculate 2D normal and send it to \"Pass 1\" shader with CUSTOM variable
		CUSTOM.yz = vec2( sin( angle_rand - 1.570796 ), cos( angle_rand - 1.570796 ) );
	}
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/tunnel_radius = 1.535
shader_param/tunnel_length = 13.954

[sub_resource type="Shader" id=5]
code = "shader_type spatial;

render_mode unshaded;
uniform sampler2D texture_albedo : hint_albedo;

void vertex() {
	// caculate world_y: get local 2D normal from particle shader variable CUSTOM.yz and transform it from model space to world space
	vec4 world_y = WORLD_MATRIX * vec4( 0.0, INSTANCE_CUSTOM.y, INSTANCE_CUSTOM.z, 0.0);
	// calculate world_z by the cross product of WORLD_MATRIX[0] ( = world_x) and world_y
	vec4 world_z = vec4( cross( WORLD_MATRIX[0].xyz, world_y.xyz ), 0.0 );
	// calculate model space to view space
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4( WORLD_MATRIX[0], world_y, world_z, WORLD_MATRIX[3] );
}

void fragment() {
	ALBEDO = texture( texture_albedo, UV ).rgb;
	ALPHA = texture( texture_albedo, UV ).a;	
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/texture_albedo = ExtResource( 3 )

[sub_resource type="QuadMesh" id=7]
material = SubResource( 6 )
size = Vector2( 2, 0.1 )

[node name="Luminaris_Menu" instance=ExtResource( 1 )]
script = ExtResource( 5 )

[node name="CollisionShape" type="CollisionShape" parent="." index="1"]
transform = Transform( 0.2, 0, 0, 0, 0.2, 0, 0, 0, 0.2, 0, 0, 0.0921291 )
shape = SubResource( 1 )

[node name="Fire1" type="MeshInstance" parent="." index="2"]
transform = Transform( -0.04, -1.31134e-08, 2.67496e-17, 0, -6.55671e-09, -0.007, 3.49691e-09, -0.15, 3.0598e-10, 0.0325935, 0.00539317, -0.476343 )
mesh = SubResource( 2 )
material/0 = null

[node name="Fire2" type="MeshInstance" parent="." index="3"]
transform = Transform( -0.04, -1.31134e-08, 2.67496e-17, 0, -6.55671e-09, -0.007, 3.49691e-09, -0.15, 3.0598e-10, -0.0367631, 0.00627237, -0.481954 )
mesh = SubResource( 2 )
material/0 = null

[node name="RegressDashes" parent="." index="4" instance=ExtResource( 4 )]
transform = Transform( 8.74228e-08, -6.60025e-15, 1, -3.01992e-07, -1, -1.69407e-20, 2, -1.50996e-07, -4.37114e-08, 0, 0, -8.87447 )
lifetime = 0.83
speed_scale = 0.4
explosiveness = 0.25
randomness = 0.08
process_material = SubResource( 4 )
draw_pass_1 = SubResource( 7 )
